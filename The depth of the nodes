import java.util.*;

class Node {
    Node parent;
    Node left;
    Node right;

    private int key;
    private int level;

    Node(Node parent, int key, int level) {
        this.parent = parent;
        this.left = null;
        this.right = null;
        this.key = key;
        this.level = level;
    }

    public int getKey() {
        return key;
    }

    public int getLevel() {
        return level;
    }

    public Node getParent() {
        return parent;
    }

    public Node getLeft() {
        return left;
    }

    public Node getRight() {
        return right;
    }

    public void setLeft(Node left) {
        this.left = left;
    }

    public void setRight(Node right) {
        this.right = right;
    }
}

public class Main {
    private static Node root = null;

    public static Node add(Node node, Node parent, int key) {
        if (node == null) {
            node = new Node(parent, key, parent.getLevel() + 1);
        } else if (key < node.getKey())
            node.setLeft(add(node.getLeft(), node, key));
        else
            node.setRight(add(node.getRight(), node, key));

        return node;
    }

    public static String getLevel(Node node, int key) {
        if (node == null)
            return "no";
        
        int nodeKey = node.getKey();
        if (key == nodeKey) 
            return Integer.toString(node.getLevel());
        else if (key < nodeKey) 
            return getLevel(node.getLeft(), key);
        else
            return getLevel(node.getRight(), key);
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int number = sc.nextInt(); 
        sc.nextLine();

        for (int i = 0; i < number; i++) {
            String cmd = sc.nextLine();
            int key = Integer.parseInt(cmd.substring(2, cmd.length()));

            if (i == 0) {
                root = new Node(null, key, 0);
                continue;
            }

            switch(cmd.charAt(0)) {
                case '+':
                    add(root, null, key);
                    break;
                case '?':
                    System.out.println(getLevel(root, key));
                    break;
                default:
                    break;
            }
        }   
    }
}
