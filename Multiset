interface Multiset<E> {

    /**
     * Add an element to the multiset.
     * It increases the multiplicity of the element by 1.
     */
    void add(E elem);

    /**
     * Remove an element from the multiset.
     * It decreases the multiplicity of the element by 1.
     */
    void remove(E elem);

    /**
     * Union this multiset with another one. The result is the modified multiset (this).
     * It will contain all elements that are present in at least one of the initial multisets.
     * The multiplicity of each element is equal to the maximum multiplicity of
     * the corresponding elements in both multisets.
     */
    void union(Multiset<E> other);

    /**
     * Intersect this multiset with another one. The result is the modified multiset (this).
     * It will contain all elements that are present in the both multisets.
     * The multiplicity of each element is equal to the minimum multiplicity of
     * the corresponding elements in the intersecting multisets.
     */
    void intersect(Multiset<E> other);

    /**
     * Returns multiplicity of the given element.
     * If the set doesn't contain it, the multiplicity is 0
     */
    int getMultiplicity(E elem);

    /**
     * Check the multiset contains an element,
     * i.e. the multiplicity > 0
     */
    boolean contains(E elem);

    /**
     * The number of unique elements
     */
    int numberOfUniqueElements();

    /**
     * The size of the multiset, including repeated elements
     */
    int size();

    /**
     * The set of unique elements (without repeating)
     */
    Set<E> toSet();
}

class HashMultiset<E> implements Multiset<E> {

    private Map<E, Integer> map = new HashMap<>();

    @Override
    public void add(E elem) {
        // implement the method
        if (map.containsKey(elem))
        {
            map.put(elem, map.get(elem) + 1);
        }
        else
        {
            map.put(elem, 1);
        }
    }

    @Override
    public void remove(E elem) {
        // implement the method
        if (map.containsKey(elem))
        {
            map.put(elem, map.get(elem) - 1);
            
            if (map.get(elem) == 0)
                map.remove(elem);
        }
    }

    @Override
    public void union(Multiset<E> other) {
        // implement the method
        Iterator<Map.Entry<E, Integer>> it = map.entrySet().iterator();
        while (it.hasNext())
        {
            E tmp = it.next().getKey();
            if (other.contains(tmp))
            {
                map.put(tmp, Math.max(map.get(tmp), other.getMultiplicity(tmp)));
                
                while (other.contains(tmp))
                    other.remove(tmp);
            }
        }

        Set<E> sete = other.toSet();
        for (E tmp : sete)
        {
            map.put(tmp, other.getMultiplicity(tmp));
        }
    }

    @Override
    public void intersect(Multiset<E> other) {
        // implement the method
        Iterator<Map.Entry<E, Integer>> it = map.entrySet().iterator();
        while (it.hasNext())
        {
            E tmp = it.next().getKey();
            if (other.contains(tmp))
            {
                map.put(tmp, Math.min(map.get(tmp), other.getMultiplicity(tmp)));
            }
            else
            {
                it.remove();
            }
        }
    }

    @Override
    public int getMultiplicity(E elem) {
        // implement the method
        if (map.get(elem) == null)
            return 0;
        else    
            return map.get(elem);
    }

    @Override
    public boolean contains(E elem) {
        // implement the method
        return map.containsKey(elem);
    }

    @Override
    public int numberOfUniqueElements() {
        // implement the method
        return map.size();
    }

    @Override
    public int size() {
        // implement the method
        int sumsize = 0;
        for (Map.Entry<E, Integer> en : map.entrySet())
        {
            sumsize += en.getValue();
        }

        return sumsize;
    }

    @Override
    public Set<E> toSet() {
        // implement the method
        Set<E> res = new LinkedHashSet<>();
        for (Map.Entry<E, Integer> en : map.entrySet())
        {
            res.add(en.getKey());
        }

        return res;
    }

    public Map<E, Integer> getMap()
    {
        return map;
    }
}
