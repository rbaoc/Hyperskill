import java.util.*;
import java.text.SimpleDateFormat;
import java.math.RoundingMode;
import java.text.DecimalFormat;

/*class Viking {
  String name;
  Map<Date, Integer> map;
}*/

class Pair {
  public String name;
  public int x;
  public float y;
  
  Pair(String name, int x, float y) {
    this.name = name;
    this.x = x;
    this.y = y;
  }
}

public class Main
{
  public static void main (String[] args) throws java.lang.Exception
  {
    /*
     * Cheatsheet: how to read & write data from standard I/O
     * java.io.BufferedReader r = new java.io.BufferedReader (new java.io.InputStreamReader (System.in));
     * String s;
     * s=r.readLine();
     * System.out.println(s);
     */

    SortedMap<String, Map<Date, Integer>> map = new TreeMap();
    List<Pair> list = new ArrayList();
    
    Scanner sc = new Scanner(System.in);
    while (sc.hasNext()) {
      String name = sc.next();
      Date date = new SimpleDateFormat("MM/dd/yyyy").parse(sc.next());
      int fish = sc.nextInt();
      
      if (map.containsKey(name)) {
        map.get(name).put(date, fish);
      } else {
        SortedMap<Date, Integer> daily = new TreeMap();
        daily.put(date, fish);
        map.put(name, daily);
      }
    }
    
    for (Map.Entry<String, Map<Date, Integer>> en : map.entrySet()) {
      String name = en.getKey();
      Map<Date, Integer> daily = en.getValue();
      
      int num = 0;
      int sum = 0;
      int longAL = 0;
      int longest = 0;
      
      Date previous = null;
      
      for (Map.Entry<Date, Integer> enen : daily.entrySet()) {
        int fishToday = enen.getValue();
        num++;
        sum += fishToday;
        
        if (num == 1) {
      		previous = enen.getKey();
          	if (fishToday > 0) 
              longAL++;
          	continue;
        }
        
        if (enen.getKey().compareTo(previous) == 1 && fishToday > 0) {
        	longAL++;
          	longest = Math.max(longest, longAL);
        } else {
          	longest = Math.max(longest, longAL);
          	longAL = 1;
        }
        
        previous = enen.getKey();
      }
      
      list.add(new Pair(name, longest, (float) sum/num));
    }
    
    Collections.sort(list, new Comparator<Pair>() {
      @Override
      public int compare(Pair p1, Pair p2) {
        if (p1.x != p2.x)
          return p2.x - p1.x;
        else 
          return (int) (p2.y - p1.y);
      }
    });
    
    DecimalFormat df = new DecimalFormat("#.##");
	df.setRoundingMode(RoundingMode.CEILING);
    for (Pair pair : list) {
      System.out.println(pair.name + " " + pair.x + " " + df.format(pair.y));
    }
  }
}
