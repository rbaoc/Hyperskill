import java.util.*;

class Node {
    Node parent;
    Node left;
    Node right;

    private int key;
    private int level;

    Node(Node parent, int key, int level) {
        this.parent = parent;
        this.left = null;
        this.right = null;
        this.key = key;
        this.level = level;
    }

    public int getKey() {
        return key;
    }

    public int getLevel() {
        return level;
    }

    public Node getParent() {
        return parent;
    }

    public Node getLeft() {
        return left;
    }

    public Node getRight() {
        return right;
    }

    public void setLeft(Node left) {
        this.left = left;
    }

    public void setRight(Node right) {
        this.right = right;
    }
}

public class Main {
    private static Node root = null;

    public static Node add(Node node, Node parent, int key) {
        if (node == null) {
            node = new Node(parent, key, parent.getLevel() + 1);
        } else if (key < node.getKey())
            node.setLeft(add(node.getLeft(), node, key));
        else
            node.setRight(add(node.getRight(), node, key));

        return node;
    }

    public static int getHeight(Node node, int max) {
        if (node == null)
            return max;

        max = Math.max(node.getLevel(), max);
        return Math.max(getHeight(node.getLeft(), max), getHeight(node.getRight(), max)); 
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int number = sc.nextInt(); 

        for (int i = 0; i < number; i++) {
            if (i == 0) {
                root = new Node(null, sc.nextInt(), 0);
                continue;
            }

            add(root, null, sc.nextInt());
        }

        System.out.println(getHeight(root, 0));
    }
}
