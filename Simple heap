import java.util.*;

class MinHeap {
    private int[] heap;
    private int[] times;
    private int size;
    private int maxsize;

    public int[] getTimes() {
        return times;
    }

    public int getSize() {
        return size;
    }

    public MinHeap(int maxsize) {
        this.size = 0;
        this.maxsize = maxsize;
        heap = new int[maxsize + 1];
        times = new int[maxsize];
        heap[0] = Integer.MIN_VALUE;
    } 

    public void swap(int pos1, int pos2) {
        int tmp = heap[pos1];
        heap[pos1] = heap[pos2];
        heap[pos2] = tmp;
        times[heap[pos1] - 1]++;
        times[heap[pos2] - 1]++;
    }

    public void insert(int element) {
        heap[++size] = element;
        int current = size;

        while(heap[current] < heap[current / 2]) {
            swap(current, current / 2);
            current = current / 2;
        }
    }

    public void extractMin() {
        if (size == 0) 
            throw new NoSuchElementException("Heap is empty.");
        
        heap[1] = heap[size--];
        minHeapify(1);    
    }

    public void minHeapify(int pos) {
        if (2*pos == size) {
            if (heap[pos] > heap[2*pos]) {
                swap(pos, 2*pos);
                minHeapify(2*pos);
            }

            return;
        }

        if (2*pos < size) {
            if (heap[pos] > heap[2*pos] || heap[pos] > heap[2*pos + 1]) {
                if (heap[2*pos] < heap[2*pos + 1]) {
                    swap(pos, 2*pos);
                    minHeapify(2*pos);
                } else {
                    swap(pos, 2*pos + 1);
                    minHeapify(2*pos + 1);
                }
            }
        }
    }
}

class Main {
    public static void main(String[] args) {
        // put your code here
        Scanner sc = new Scanner(System.in);
        int number = sc.nextInt();
        MinHeap minheap = new MinHeap(number);

        for (int i = 0; i < number; i++) {
            char cmd = sc.next().charAt(0);
            switch(cmd) {
                case '+':
                    minheap.insert(sc.nextInt());
                    break;
                case '-':
                    minheap.extractMin();
                    break;
                case '?':
                    System.out.println((int) Math.ceil(Math.log(minheap.getSize() + 1) / Math.log(2)) - 1);
                    break;
                default:
                    break;
            }
        }
    }
}
