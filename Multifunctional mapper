/**
 * The function accepts a list of mappers and returns an operator that accepts a list of integers
 * and sequentially applies each mapper to each value (perform a transformation)
 */
public static final Function<List<IntUnaryOperator>, UnaryOperator<List<Integer>>> multifunctionalMapper =
        listOperator -> listInt -> listInt.stream()
                                        .map(
                                                x -> listOperator.stream() 
                                                                .reduce(a -> a, (op1, op2) -> op1.andThen(op2))
                                                                .applyAsInt(x)
                                        )
                                        .collect(Collectors.toList());

/**
 * EXAMPLE: the operator transforms each number to the same number (perform the identity transformation)
 *
 * It returns a list of the same numbers.
 */
public static final UnaryOperator<List<Integer>> identityTransformation =
        multifunctionalMapper.apply(Arrays.asList(x -> x, x -> x, x -> x));

/**
 * The operator accepts an integer list. 
 * It multiplies by two each integer number and then add one to its.
 * 
 * The operator returns transformed integer list.
 */
public static final UnaryOperator<List<Integer>> multTwoAndThenAddOneTransformation =
        list -> list.stream()
                        .map(x -> 2 * x + 1)
                        .collect(Collectors.toList());

/**
 * The operator accepts an integer list. 
 * It squares each integer number and then get the next even number following it.
 * 
 * The operator returns transformed integer list.
 */
public static final UnaryOperator<List<Integer>> squareAndThenGetNextEvenNumberTransformation =
        list -> list.stream()
                        .map(x -> ((x * x) / 2 + 1) * 2)
                        .collect(Collectors.toList());
